<?php
/**
 * A model class for the RedBean object Upload
 *
 * @author Lindsay Marshall <lindsay.marshall@ncl.ac.uk>
 * @copyright 2015-2016 Newcastle University
 *
 */
/**
 * Upload table stores info about files that have been uploaded...
 */
    class Model_Upload extends RedBean_SimpleModel
    {
/**
 * Determine if a user can access the file
 *
 * At the moment it is either the user or any admin that is allowd. Rewrite the
 * method to add more complex access control schemes.
 *
 * @param object	$user	A user object
 *
 * @return boolean
 */
	public function canaccess($user)
	{
	    return $this->bean->user->equals($user) || $user->isadmin() || $user->isprojectstudent()
        || $user->isthemeleader() || $user->ismoduleleader();
	}
/**
 * Return the owner of this uplaod
 *
 * @return object
 */
	public function owner()
	{
	    return $this->bean->user;
	}
/**
 * Store a file
 *
 * @param object	$context	The context object for the site
 * @param array         $da     	The relevant $_FILES element (or similar generated by FormData)
 * @param boolean	$public		If TRUE then store in the public directory
 * @param object	$owner		The user who owns the upload. If NULL then  the currently logged in user
 */
	public function savefile($context, $da, $public, $owner = NULL)
	{
	    if ($da['size'] == 0 || $da['error'] != UPLOAD_ERR_OK)
	    { # 0 length file or there was an error so ignore
		return FALSE;
	    }
            $dir = getcwd();
	    chdir($context->local()->basedir());
	    $pname = array($public ? 'public' : 'private', $context->user()->getID(), date('Y'), date('m'));
            foreach ($pname as $pd)
            { # walk the path cding and making if needed
                $this->mkch($pd);
            }
	    $fname = uniqid('', TRUE).'.'.pathinfo($da['name'], PATHINFO_EXTENSION);
	    if (!@move_uploaded_file($da['tmp_name'], $fname))
            {
                throw new Exception('Cannot move uploaded file to '.$fname);
            }
	    $this->added = R::isodatetime();
	    $pname[] = $fname;
	    $this->fname = DIRECTORY_SEPARATOR.implode(DIRECTORY_SEPARATOR, $pname);
            $this->filename = $da['name'];
	    if (!$public && !is_object($owner))
	    {
		if (!$context->hasuser())
		{ # no logged in user! This should never happen...
		    throw new Exception('No user');
		}
		$owner = $context->user();
	    }
	    $this->public = $public ? 1: 0;
	    $this->user = $owner;
	    R::store($this->bean);
	    if (!@chdir($dir))
            { # go back to where we were in the file system
                throw new Exception('Cannot chdir ', $dir);
            }
	    return TRUE;
	}
 /**
 * Make a directory if necessary and cd into it
 *
 * @param string    $dir The directory name
 */
        private static function mkch($dir)
        {
            if (!file_exists($dir))
            {
                if (!@mkdir($dir, 0770))
                {
                    throw new Exception('Cannot mkdir ', $dir);
                }
            }
            if (!@chdir($dir))
            {
                throw new Exception('Cannot chdir ', $dir);
            }
        }
    }
?>
